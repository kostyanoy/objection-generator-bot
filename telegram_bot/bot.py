import asyncio
import logging
import os

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, MessageHandler, filters, ApplicationBuilder, ContextTypes, CallbackQueryHandler

from emotion_recognition.progress.model_load import get_vectorizer, get_model
from telegram_bot.emotion_classifier import EmotionClassifier
from telegram_bot.video_generator import VideoGenerator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)  # –ª–æ–≥–≥–µ—Ä
emotion_classifier = EmotionClassifier(
    vectorizer=get_vectorizer(),
    model=get_model()
)
forwarded_messages_buffer: dict[int, VideoGenerator] = {}  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Ç–æ–º —á–∏—Å–ª–µ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ª—é–¥–µ–π), "
             "—è –æ–ø—Ä–µ–¥–µ–ª—é —ç–º–æ—Ü–∏–∏ –∏ —Å–¥–µ–ª–∞—é –≤–∏–¥–µ–æ –≤ —Å—Ç–∏–ª–µ Ace Attorney!\n\n"
             "–ò—Å–ø–æ–ª—å–∑—É–π /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    TEXT_HELP = ("–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
                 "1. –í—ã–±–µ—Ä–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–∂–Ω–æ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ª—é–¥–µ–π).\n"
                 "2. –ù–∞–∂–º–∏ ¬´–ü–µ—Ä–µ—Å–ª–∞—Ç—å¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å –∏—Ö –º–Ω–µ.\n"
                 "3. –Ø —Å–¥–µ–ª–∞—é –≤–∏–¥–µ–æ —Å —É—á—ë—Ç–æ–º —ç–º–æ—Ü–∏–π.\n"
                 "–í–∏–¥–µ–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–µ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ ‚Äî –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.\n"
                 "–ï—Å–ª–∏ —Ç—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏, —è —Å–æ–æ–±—â—É —Ç–µ–±–µ –æ–± —ç—Ç–æ–º.")
    TEXT_ABOUT = "–≠—Ç–æ—Ç –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–µ–ª–∞–µ—Ç –≤–∏–¥–µ–æ –≤ —Å—Ç–∏–ª–µ Ace Attorney."
    TEXT_STATUS_PROCESSING = "–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É."
    TEXT_STATUS_IDLE = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É."

    # –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = [
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about')],
        [InlineKeyboardButton("üìù –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data='example')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data='status')],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data='close')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query is None:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=TEXT_HELP, reply_markup=reply_markup)
        return

    query = update.callback_query
    await query.answer()

    # –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ
    if query.data == 'about':
        await query.edit_message_text(text=TEXT_ABOUT, reply_markup=reply_markup)
    elif query.data == 'example':
        await query.edit_message_text(text=TEXT_HELP, reply_markup=reply_markup)
    elif query.data == 'status':
        user_id = update.effective_user.id
        if user_id in forwarded_messages_buffer and forwarded_messages_buffer[user_id].is_processing:
            await query.edit_message_text(text=TEXT_STATUS_PROCESSING, reply_markup=reply_markup)
        else:
            await query.edit_message_text(text=TEXT_STATUS_IDLE, reply_markup=reply_markup)
    elif query.data == 'close':
        await query.message.delete()


async def handle_forwarded_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    user_id = update.effective_user.id
    if user_id in forwarded_messages_buffer and forwarded_messages_buffer[user_id].is_processing:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–û–∂–∏–¥–∞–π—Ç–µ, –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è. (–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã)")
        return

    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ
    if user_id not in forwarded_messages_buffer:
        chat_id = update.effective_chat.id
        forwarded_messages_buffer[user_id] = VideoGenerator(asyncio.get_event_loop(), context.bot, chat_id,
                                                            emotion_classifier)
    forwarded_messages_buffer[user_id].add_message(update)


def main():
    load_dotenv()
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

    if not TOKEN:
        raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

    application = ApplicationBuilder() \
        .token(TOKEN) \
        .build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    # application.add_handler(CommandHandler("status", status))

    application.add_handler(CallbackQueryHandler(help_command))

    application.add_handler(MessageHandler(filters.FORWARDED & filters.TEXT, handle_forwarded_messages))

    # –ó–∞–ø—É—Å–∫
    application.run_polling()


if __name__ == '__main__':
    main()
